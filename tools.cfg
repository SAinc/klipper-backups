# Definitions for each toolhead

###############################################################################
# TOOL 0:   Smart Orbiter 
###############################################################################

[mcu SO3T0]
serial: /dev/serial/by-id/usb-Klipper_stm32f042x6_SO3_T1-if00

#SO3 toolboard pinout definition
# PA0 - Hotend heater control
# PA1 - Hotend power ssensing input
# PA2 - Hotent temperature sensor input
# PA3 - Extruder fan Tacho input
# PA4 - LIS2DW12 nCS - SPI1
# PA5 - LIS2DW12 CLK
# PA6 - LIS2DW12 SDO
# PA7 - LIS2DW12 SDI
# PA8 - Extruder PWM fan speed contol
# PA9 - Hotend lit LED control signal
# PA10 - Filament unload button
# PA11 - USB Data -
# PA12 - USB Data +
# PA13 - Filement sensor
# PA14 - Part fan PWM
# PA15 - Z sensor probe input

# PB0 - X end stop
# PB1 - extruder temperature
# PB3 - Z sensor servo output
# PB4 - TMC2209 nEN
# PB5 - TMC2209 UART
# PB6 - TMC2209 DIR
# PB7 - TMC2209 STEP
# PB8 - RGB LED

#################################################
# ACCELEROMETER

[lis2dw]
cs_pin: SO3T0:PA4
spi_bus: spi1
axes_map: y, z, x

[resonance_tester]
accel_chip: lis2dw
probe_points: 170,170,30  # edit XYZ head position for testing
min_freq: 10
max_freq: 200

#################################################
# EXTRUDER

[extruder]
step_pin: SO3T0:PB7
dir_pin: SO3T0:PB6
enable_pin: !SO3T0:PB4
microsteps: 32
full_steps_per_rotation: 200
rotation_distance: 4.69
nozzle_diameter: 0.400
filament_diameter: 1.750
max_extrude_only_distance: 2500
max_extrude_only_velocity: 120
max_extrude_only_accel: 3000
heater_pin: SO3T0:PA0
sensor_pin: SO3T0:PA2
sensor_type: ATC Semitec 104NT-4-R025H42G  
pullup_resistor: 4700
min_temp: 0
max_temp: 300
pressure_advance: 0.015
pressure_advance_smooth_time: 0.03
min_extrude_temp: 170
smooth_time: 0.5
max_extrude_cross_section:10
max_power: 0.995
pwm_cycle_time: 0.01
control = pid
pid_Kp=22.841 
pid_Ki=1.791 
pid_Kd=72.808

[tmc2209 extruder] 
uart_pin: SO3T0:PB5
interpolate: true
run_current: 0.85
sense_resistor: 0.11
# stealthchop_threshold: 0

[autotune_tmc extruder]
motor: ldo-36sth20-1004ahg
voltage: 24
tuning_goal: auto

[heater_fan extruder0_Fan]
pin: !SO3T0:PA8
tachometer_pin: SO3T0:PA3
tachometer_ppr: 2
tachometer_poll_interval: 0.0005
heater: extruder
cycle_time: 0.0001 #10KHz PWM frecvency, do not change this!
heater_temp: 85
fan_speed: 0.65 # increase in case experiencing clogging during printing.
hardware_pwm: false
shutdown_speed: 0.0
max_power: 1.0

[firmware_retraction]
retract_length: 0.6
retract_speed: 100
unretract_extra_length: 0.0
unretract_speed: 80

[fan_generic partfan_t0]
pin: SO3T0:PA14
max_power: 0.995
shutdown_speed: 0.0
cycle_time: 0.01
kick_start_time: 0.2
hardware_pwm: False

#################################################
# FEATURES

[output_pin Hotend_Light_T0]
pin: SO3T0:PA9
pwm: False
value: 1

[neopixel SO3RGB_T0]
pin: SO3T0:PB8
chain_count: 1
color_order: GRB
initial_RED: 0.0
initial_GREEN: 1.0
initial_BLUE: 0.0

[thermistor SO3Thermistor_T0]
temperature1: 25
resistance1: 100000
beta: 3950

[temperature_sensor SO3T0]
sensor_type: SO3Thermistor_T0
sensor_pin: SO3T0:PB1
pullup_resistor: 4700
min_temp: 0
max_temp: 85


###############################################################################
# TOOL 1:   Smart Orbiter 
###############################################################################

[mcu SO3T1]
serial: /dev/serial/by-id/usb-Klipper_stm32f042x6_SO3_T2-if00

#SO3 toolboard pinout definition
# PA0 - Hotend heater control
# PA1 - Hotend power ssensing input
# PA2 - Hotent temperature sensor input
# PA3 - Extruder fan Tacho input
# PA4 - LIS2DW12 nCS - SPI1
# PA5 - LIS2DW12 CLK
# PA6 - LIS2DW12 SDO
# PA7 - LIS2DW12 SDI
# PA8 - Extruder PWM fan speed contol
# PA9 - Hotend lit LED control signal
# PA10 - Filament unload button
# PA11 - USB Data -
# PA12 - USB Data +
# PA13 - Filement sensor
# PA14 - Part fan PWM
# PA15 - Z sensor probe input

# PB0 - X end stop
# PB1 - extruder temperature
# PB3 - Z sensor servo output
# PB4 - TMC2209 nEN
# PB5 - TMC2209 UART
# PB6 - TMC2209 DIR
# PB7 - TMC2209 STEP
# PB8 - RGB LED

# #################################################
# # ACCELEROMETER

# [lis2dw]
# cs_pin: SO3T1:PA4
# spi_bus: spi1
# axes_map: y, z, x

# [resonance_tester]
# accel_chip: lis2dw
# probe_points: 170,170,30  # edit XYZ head position for testing
# min_freq: 10
# max_freq: 200

#################################################
# EXTRUDER

[extruder1]
step_pin: SO3T1:PB7
dir_pin: SO3T1:PB6
enable_pin: !SO3T1:PB4
microsteps: 32
full_steps_per_rotation: 200
rotation_distance: 4.69
nozzle_diameter: 0.400
filament_diameter: 1.750
max_extrude_only_distance: 2500
max_extrude_only_velocity: 120
max_extrude_only_accel: 3000
heater_pin: SO3T1:PA0
sensor_pin: SO3T1:PA2
sensor_type: ATC Semitec 104NT-4-R025H42G  
pullup_resistor: 4700
min_temp: 0
max_temp: 300
pressure_advance: 0.015
pressure_advance_smooth_time: 0.03
min_extrude_temp: 170
smooth_time: 0.5
max_extrude_cross_section:10
max_power: 0.995
pwm_cycle_time: 0.01
control = pid
pid_Kp=22.680 
pid_Ki=1.779 
pid_Kd=72.292

[tmc2209 extruder1] 
uart_pin: SO3T1:PB5
interpolate: true
run_current: 0.85
sense_resistor: 0.11
# stealthchop_threshold: 0

[autotune_tmc extruder1]
motor: ldo-36sth20-1004ahg
voltage: 24
tuning_goal: auto

[heater_fan extruder1_Fan]
pin: !SO3T1:PA8
tachometer_pin: SO3T1:PA3
tachometer_ppr: 2
tachometer_poll_interval: 0.0005
heater: extruder1
cycle_time: 0.0001 #10KHz PWM frecvency, do not change this!
heater_temp: 85
fan_speed: 0.65 # increase in case experiencing clogging during printing.
hardware_pwm: false
shutdown_speed: 0.0
max_power: 1.0

[firmware_retraction]
retract_length: 0.6
retract_speed: 100
unretract_extra_length: 0.0
unretract_speed: 80

[fan_generic partfan_t1]
pin: SO3T1:PA14
max_power: 0.995
shutdown_speed: 0.0
cycle_time: 0.01
kick_start_time: 0.2
hardware_pwm: False

#################################################
# FEATURES

[output_pin Hotend_Light_T1]
pin: SO3T1:PA9
pwm: False
value: 1

[neopixel SO3RGB_T1]
pin: SO3T1:PB8
chain_count: 1
color_order: GRB
initial_RED: 0.0
initial_GREEN: 1.0
initial_BLUE: 0.0

[thermistor SO3Thermistor_T1]
temperature1: 25
resistance1: 100000
beta: 3950

[temperature_sensor SO3T1]
sensor_type: SO3Thermistor_T1
sensor_pin: SO3T1:PB1
pullup_resistor: 4700
min_temp: 0
max_temp: 85


#*****************************initial RGB LED set at printer start****************************************************************
# [delayed_gcode startup_RGB_SET_T0]
# initial_duration: 2
# gcode:    
#   {% if printer["filament_switch_sensor SO3T0Sensor"].filament_detected==true %}
#       SET_LED LED=SO3RGB_T0 RED=0.0 GREEN=1.0 BLUE=0.0
#   {% else %}
#       SET_LED LED=SO3RGB_T0 RED=1.0 GREEN=0.0 BLUE=0.0
#   {% endif %}   


# #***********************************filament swicth definition***********************************************************

# [filament_switch_sensor SO3T0Sensor]
# switch_pin: SO3T0:PA13
# pause_on_runout: False # do not change to true, printer is paused in the next sections
# runout_gcode: UPDATE_DELAYED_GCODE ID=runout_filter DURATION=0.5 # duration defines the filter time for runnout detection
# insert_gcode: filament_load_init
# event_delay: 1.0
# pause_delay: 0.1


# #////////////////////////////////////////Filament Unload macros/////////////////////////////////////////////////

# # [gcode_button filament_unload]
# # pin: !SO3T0:PA10
# # release_gcode:  # filament unload procedure   
# #   SET_LED LED=SO3RGB_T0 RED=0.0 GREEN=0.5 BLUE=0.5
# #   filament_unload_init
# # press_gcode: # do not add any macro call here

# [delayed_gcode runout_filter]
# gcode: #checking if filament runout is still present after defined delay time, default 0.5s
#   {% if printer["filament_switch_sensor SO3T0Sensor"].filament_detected==false %}
#       runnout_init      
#   {% else %}
#       M118 Runout sensor intermitent contact detected!
#   {% endif %} 


# [gcode_macro runout_init]
# gcode:
#   {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %} 
#   SET_LED LED=SO3RGB RED=1.0 GREEN=0.0 BLUE=0.0
#   {% if (printer.print_stats.state == "printing") %}      
#     {% if(sensor.disable_runnout|lower == 'false') %}
#       filament_change_state1
#     {% else %}
#     M118 Filament runnout is disabled in the sensor config file!   
#     {% endif %}     
#   {% endif %} 
#   UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2
#   UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2    
#   SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=filamentpresent VALUE=0

# [gcode_macro filament_change_state1]
# variable_changebusy: 0
# variable_temp_target: 0
# gcode:
#   {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}  
#   {% if changebusy == 0 %}
#     PAUSE # call printer pause macro      
#     SET_GCODE_VARIABLE MACRO=filament_change_state1 VARIABLE=changebusy VALUE=1       
#     M118 Filament runnout!       
#     filament_change_state2     # comment this line if you do not want to automatically unload filament in case there is a runnout detected.
#   {% else %}
#   {% endif %}

# [gcode_macro filament_change_state2]
# gcode:
#   {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}  
#   SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1      
#   {% if (sensor.enable_beep|lower == 'true') %} 
#     M300 # beep sound
#   {% endif %}
#   M118 Unloading filament...   
#   M83
#   G92 E0     
#   {% if (printer.extruder.can_extrude|lower != 'true')%} # checing for minimum extrusion temperature
#         # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
#       M118 Hotend heating!        
#       SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
#       TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp} #wait for reaching filament unload temp
#       {% endif %}     
#   {% if(printer.extruder.target == 0) %} # checing for set temperature if is zero than set to 200 / hotend hot but cooling due to set target temp 0
#       SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
#       TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp} #wait for reaching filament unload temp
#   {% endif %} 
#  # filament_unload_procedure  # call macro of filamnet unload procedure        
#   M400   
#   M118 Load new filament! Wait until is loaded, then resume printing.  
#   SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0 # swicth off heater
#   UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2.5 # timing must be set to clear delay plus 0.5s. is due to wait to remove filament before starting load even in case there is a blob at the tip of the extracted filament which woudl trigger the sensor twice

# #############################################END filament auto load macro section END***********************************************************

# [gcode_macro filament_load_init]
# gcode:
#   {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}  
#   SET_LED LED=SO3RGB RED=0.0 GREEN=1.0 BLUE=0.0
#   {% if (printer.print_stats.state != "printing") %}
#     {% if(sensor.disable_autoload|lower == 'false') %}
#       filament_load
#     {% else %}
#     M118 Filament auto-load is disabled in the sensor config file!   
#     {% endif %} 
#   {% else %}    
#     M118 Printing! Can't load filament right now!    
#   {% endif %} 
#   SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=filamentpresent VALUE=1
#   UPDATE_DELAYED_GCODE ID=clear_changebusy DURATION=2  


# [gcode_macro filament_load]
# variable_loadbusy: 0
# variable_USER_TEMP: 0
# variable_LOAD_TEMP: 0
# gcode:  
#     SET_LED LED=SO3RGB RED=0.7 GREEN=0.5 BLUE=0.0
#     {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
#     {% if loadbusy == 0 %} # requires [virtual_sdcard] 
#       SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
#       SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=1    
#       {% set USER_TEMP = printer.extruder.target %} # save user set temperature before loading
#       {% set LOAD_TEMP = 0 %}       
#         {% if (printer.extruder.can_extrude|lower != 'true') or (printer.extruder.target < sensor.filament_load_min_temp) %} # checking for minimum extrusion temperature
#         # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)                        
#           SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_load_temp} # set user defined load temperature
#           {% set LOAD_TEMP = sensor.filament_load_temp %} # save user set temperature before loading           
#          M118 Hotend heating! 
#       {% endif %}     
#     {% if (sensor.enable_beep|lower == 'true') %} 
#       M300 # beep sound
#     {% endif %}
#     M118 Filament loading!  
#     M82           #set extruder to absolute mode
#     G92 E0
#     G4 P1500        # wait for 1.5 seconds
#     FORCE_MOVE STEPPER=extruder DISTANCE=15 VELOCITY=10 ACCEL=1000  # load filament inside the gears force move needs to be enabled    
#     TEMPERATURE_WAIT SENSOR=extruder MINIMUM={LOAD_TEMP} # wait for reaching set temperature    
#     TEMPERATURE_WAIT SENSOR=extruder MINIMUM={USER_TEMP} # wait for reaching set temperature    
#     G1 E{sensor.nozzle_purge_length} F{sensor.nozzle_purge_speed} # extrude preconfigured purge length
#     M400 # wait to complete nozzle purge
#     SET_HEATER_TEMPERATURE HEATER=extruder TARGET={USER_TEMP} # restore user temp if it was set before loading
#     M118 Filament load complete!   
#     SET_LED LED=SO3RGB RED=0.0 GREEN=1.0 BLUE=0.0
#     UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2   
#     UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2  
#     {% else %}
#       M118 Filament already loaded!    
#     {% endif %}  
# #############################################END filament suto load macro section END***********************************************************

# #############################################filament auto unload macro section*****************************************************************
# [gcode_macro filament_unload_procedure]
# gcode:
#     G92 E0
#     G0 E-9 F3600 # retract fast 9mm
#     G4 P2000 # Wait 2 sec for filament cooling
#     G0 E9 F3000 # extruder 9mm to crush filament end
#     G0 E-5 F3000 #extract filament to cold end fast
#     G0 E-10 F300 #extract filament to cold end slow
#     G4 P5000 # Wait 5 sec for filament cooling
#     G0 E-25 F3000 	#extract filament completely  


# [gcode_macro filament_unload_init]
# gcode:
#   {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
#   {% if (printer.print_stats.state != "printing") %}
#     {% if(sensor.disable_autounload|lower == 'false') %}
#       filament_unload
#     {% else %}
#       M118 Filament auto-unload is disabled in the sensor config file!   
#     {% endif %} 
#   {% else %}   
#      M118 Printing! Can't unload filament right now!
#   {% endif %}

# [gcode_macro filament_unload] 
# variable_unloadbusy: 0
# variable_filamentpresent: 0
# gcode:
#     {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
#     {% if unloadbusy == 0 %} # requires [virtual_sdcard]  
#       SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=1
#       SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
#       {% if (sensor.enable_beep|lower == 'true') %} 
#         M300 # beep sound
#       {% endif %}
#       M118 Filament unloading!    
#       M83
#       G92 E0       
#       {% if ((printer.extruder.can_extrude|lower != 'true') or (printer.extruder.target == 0))%} # checing for minimum extrusion temperature
#         # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
#         M118 Hotend heating!          
#         SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
#         TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp} # wait for reaching configured unload temperature
#       {% endif %}  
#       filament_unload_procedure # call macro of filamnet unload procedure     
#       M104 S0 T0 
#       M400 # wait to complete unload
#       M118 Filament unload complete!   
#       UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2   
#       UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2        
#       UPDATE_DELAYED_GCODE ID=unload_RGB_update DURATION=2    
#       SET_LED LED=SO3RGB RED=0.0 GREEN=0.0 BLUE=1.0
#     {% else %}      
#       M118 Nothing to unload!
#     {% endif %}

# #############################################END filament auto unload macro section END***********************************************************

# [delayed_gcode unload_RGB_update]
# gcode: # change RGB led to RED after filament is phisicaly removed after unload
#   {% if printer["filament_switch_sensor SO3Senzor"].filament_detected==true %}
#       UPDATE_DELAYED_GCODE ID=unload_RGB_update DURATION=2       
#   {% else %}
#       SET_LED LED=SO3RGB RED=1.0 GREEN=0.0 BLUE=0.0
#   {% endif %} 


# [delayed_gcode clear_unloadbusy]
# gcode:
#   SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=0
#   #M118 Clear Unload busy! 

# [delayed_gcode clear_changebusy]
# gcode:
#   SET_GCODE_VARIABLE MACRO=filament_change_state1 VARIABLE=changebusy VALUE=0
#   #M118 Clear Load busy!  

# [delayed_gcode set_loadbusy]
# gcode:
#   SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
#   #M118 Set Load busy! 

# [delayed_gcode clear_loadbusy]
# gcode:
#   SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=0
#   #M118 Clear Load busy!  


